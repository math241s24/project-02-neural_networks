{
<<<<<<< HEAD
  "hash": "f5dbd043e9f97777bcd7bd111fe0ad45",
  "result": {
    "markdown": "---\ntitle: \"Neural Networks\"\nsubtitle: \"Project 2\"\nauthor: \"Elliott Chang, Cameron Adams\"\ntitle-slide-attributes:\n  data-slide-number: none\nformat: revealjs\neditor: visual\nexecute:\n  echo: false\n---\n\n\n\n\n\n\n\n\n## Introduction\n\nWe plan on illustrating the predictive power and flexibility of Neural Networks on data with complex relationships.\n\n-   For the sake of this project, we decided to focus on classification\n\n-   \n\n## The data:\n\nTo illustrate the power and flexibility of neural networks, we created multiple datasets with complex relationships.\n\n-   Each dataset contains two continuous predictor variables `x` and `y`, and one categorical response variable `label` with factors `a` and `b`.\n\n-   Two coninuous predictors allow us to visualize the relationships between these predictors easily, giving us an intuitive understand of what the underlying relationship might be\n\n    -   Despite the intuitive nature of the relationships, modeling them is quite difficult using tools that we've learned about so far in this class\n\n## What is a Neural Network?\n",
    "supporting": [],
=======
  "hash": "2d441b2d2495e6ef6fb5c3420559319c",
  "result": {
    "markdown": "---\ntitle: \"Neural Networks\"\nsubtitle: \"Project 2\"\nauthor: \"Elliott Chang, Cameron Adams\"\ntitle-slide-attributes:\n  data-slide-number: none\nformat: revealjs\neditor: visual\nexecute:\n  echo: false\n---\n\n\n\n\n\n\n\n\n## Introduction\n\nWe plan on illustrating the predictive power and flexibility of Neural Networks on data with complex relationships.\n\n-   For the sake of this project, we decided to focus on classification\n\n-   \n\n## The data:\n\nTo illustrate the power and flexibility of neural networks, we created multiple datasets with complex relationships.\n\n-   Each dataset contains two continuous predictor variables `x` and `y`, and one categorical response variable `label` with factors `a` and `b`.\n\n-   Two coninuous predictors allow us to visualize the relationships between these predictors easily, giving us an intuitive understand of what the underlying relationship might be\n\n## The Data (Continued)\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-4-1.png){width=70%}\n:::\n:::\n\n\n-   Despite the intuitive nature of the relationships, modeling them is quite difficult using tools that we've learned about so far in this class\n\n## What is a Neural Network?\n\n![Image](data/neuralnetwork.png)\n\n## Training Neural Networks\n\nTraining neural network involves\n\n-   Training/testing split\n\n-   Specifying the architecture of your neural network\n\n    -   How many layers?\n\n    -   How many nodes?\n\n    -   Training rate?\n\n    -   Epochs?\n\n## Testing Neural Networks\n\nTesting a neural network in the context of classification tasks involves\n\n-   Use the model to make predictions on the test data\n\n-   Compare the predictions to the true values\n\n    -   Overall accuracy?\n\n    -   Specificity?\n\n    -   Sensitivity?\n\n## Using our data...\n\nWant to add code chunks with tabs\n\n\n::: {.cell}\n\n:::\n\n\n::: panel-tabset\n\n## bye\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   prediction_label\n     a  b\n  a 94  3\n  b  6 97\n```\n:::\n:::\n\n\n## hi\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   prediction_label\n     a  b\n  a 94  3\n  b  6 97\n```\n:::\n:::\n\n\n\n:::\n\n## Conclusion\n\n-   Neural Networks are extremely powerful, especially in the context of classification\n\n-   Neural Networks are significantly more flexible than other algorithms\n",
    "supporting": [
      "presentation_files"
    ],
>>>>>>> 792a9446d7e5477ab14f9a6a65b298f1ac703100
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}