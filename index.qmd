---
title: ""
subtitle: "Project 2"
author: ""
format: html
editor: visual
execute:
  echo: false
  warning: false
  message: false
---

## Abstract

## Introduction

```{r load-packages, label="load-pkgs", message=FALSE, warning=FALSE}
library(tidyverse)
library(neuralnet)
library(keras)
library(tensorflow)
library(shiny)
library(ggplot2)
library(neuralnet)
library(dplyr)
```

```{r load-data}
genGauss <- function(cx, cy, num_samples, variance, label) {
  x <- rnorm(num_samples, mean=cx, sd=sqrt(variance))
  y <- rnorm(num_samples, mean=cy, sd=sqrt(variance))
  data.frame(x=x, y=y, label=label)
}

classifyTwoGaussData <- function(num_samples, noise) {
  variance_scale <- function(noise) { (1 - noise) * 0.5 + noise * 4 }
  variance <- variance_scale(noise)
  points1 <- genGauss(2, 2, num_samples/2, variance, 'b')
  points2 <- genGauss(-2, -2, num_samples/2, variance, 'a')
  points <- rbind(points1, points2)
  return(points)
}

set.seed(123)
data_two <- classifyTwoGaussData(1000, 0.1)
ggplot(data_two, aes(x=x, y=y, color=factor(label))) +
  geom_point(alpha=0.6) +
  labs(title="Classify Two Gauss Data", color="Label") +
  theme_minimal()

```

```{r}
generateDataByX <- function(num_samples) {
  x <- runif(num_samples, min=-5, max=5)
  y <- runif(num_samples, min=-5, max=5)
  label <- ifelse(x >= 0, 'a', 'b')
  data <- data.frame(x=x, y=y, label=label)
  return(data)
}

set.seed(123)
data_by_x <- generateDataByX(1000)
ggplot(data_by_x, aes(x=x, y=y, color=factor(label))) +
  geom_point(alpha=0.6) +
  labs(title="Data Classified by X Value", color="Label") +
  theme_minimal()

```

```{r}
generateDataByXYProduct <- function(num_samples) {
  x <- runif(num_samples, min=-5, max=5)
  y <- runif(num_samples, min=-5, max=5)
  label <- ifelse(x * y >= 0, 'b', 'a')
  data <- data.frame(x=x, y=y, label=label)
  return(data)
}

set.seed(123)
data_by_xy <- generateDataByXYProduct(1000)
ggplot(data_by_xy, aes(x=x, y=y, color=factor(label))) +
  geom_point(alpha=0.6) +
  labs(title="Data Classified by XY Product", color="Label") +
  theme_minimal()

```

```{r}

generateSpiralData <- function(num_samples, noise) {
  n <- num_samples / 2  # Half for each label
  points <- data.frame(x=numeric(0), y=numeric(0), label=character(0))
  genSpiral <- function(deltaT, label) {
    for (i in seq_len(n)) {
      r <- i / n * 5
      t <- 1.75 * i / n * 2 * pi + deltaT
      x <- r * sin(t) + rnorm(1, mean=0, sd=noise)
      y <- r * cos(t) + rnorm(1, mean=0, sd=noise)
      points <<- rbind(points, data.frame(x=x, y=y, label=label))
    }
  }
  genSpiral(0, 'b')  # Generating points labeled 'b'
  genSpiral(pi, 'a')  # Generating points labeled 'a'
  return(points)
}

set.seed(123)
spiral_data <- generateSpiralData(1000, 0.1)
ggplot(spiral_data, aes(x=x, y=y, color=factor(label))) +
  geom_point(alpha=0.6) +
  labs(title="Spiral Data", subtitle="Scatter plot of spiral data labeled as 'a' and 'b'", color="Label") +
  theme_minimal()

```

```{r}
train_test_split <- function(data) {
  data_rows <- floor(0.80 * nrow(data))
  train_indices <- sample(1:nrow(data), data_rows)
  train_data <- data[train_indices, ]
  test_data <- data[-train_indices, ]
  return(list(train=train_data, test=test_data))
}

set.seed(2)
split_data1 <- train_test_split(data_two)
train1 <- split_data1$train
test1 <- split_data1$test
split_data2 <- train_test_split(data_by_x)
train2 <- split_data2$train
test2 <- split_data2$test
split_data3 <- train_test_split(data_by_xy)
train3 <- split_data3$train
test3 <- split_data3$test
split_data4 <- train_test_split(spiral_data)
train4 <- split_data4$train
test4 <- split_data4$test


```

```{r}
set.seed(932)
model1 <- neuralnet(label~x+y, data=train1, hidden=c(5,5), linear.output=FALSE)
plot(model1, rep="best")
```

```{r}
pred <- predict(model1, test1)
labels <- c("a", "b")
prediction_label <- data.frame(max.col(pred)) %>%
  mutate(pred=labels[max.col(pred)]) %>%
  select(2) %>%
  unlist()
table(test1$label, prediction_label)

```

```{r}
check <- ifelse(test1$label == 'a', 1, 2) == max.col(pred)
accuracy <- (sum(check)/nrow(test1))*100
print(accuracy)
```

```{r}
set.seed(932)
model2 <- neuralnet(label~x+y, data=train2, hidden=c(5,5), linear.output=FALSE)
plot(model2, rep="best")
```

```{r}
pred <- predict(model2, test2)
labels <- c("a", "b")
prediction_label <- data.frame(max.col(pred)) %>%
  mutate(pred=labels[max.col(pred)]) %>%
  select(2) %>%
  unlist()
table(test2$label, prediction_label)

```

```{r}
check <- ifelse(test2$label == 'a', 1, 2) == max.col(pred)
accuracy <- (sum(check)/nrow(test2))*100
print(accuracy)

```

```{r}
set.seed(932)
model3 <- neuralnet(label~x+y, data=train3, hidden=c(5,5), linear.output=FALSE)
plot(model3, rep="best")

```

```{r}
set.seed(932)
pred <- predict(model3, test3)
labels <- c("a", "b")
prediction_label <- data.frame(max.col(pred)) %>%
  mutate(pred=labels[max.col(pred)]) %>%
  select(2) %>%
  unlist()
table(test3$label, prediction_label)

```

```{r}
check <- ifelse(test3$label == 'a', 1, 2) == max.col(pred)
accuracy <- (sum(check)/nrow(test3))*100
print(accuracy)

```

```{r}
set.seed(932)

model4_no_layers <- neuralnet(
    label~x + y,
    data=train4,
    linear.output=FALSE,
    learningrate=0.001,
    stepmax=1e+06
)

model4_5node_layer <- neuralnet(
    label~x + y,
    data=train4,
    hidden=c(5),
    linear.output=FALSE,
    learningrate=0.001,
    stepmax=1e+06
)

model4 <- neuralnet(
    label~x + y,
    data=train4,
    hidden=c(8,8),
    linear.output=FALSE,
    learningrate=0.001,
    stepmax=1e+06
)

pred <- predict(model4_no_layers, test4)
labels <- c("a", "b")
prediction_label <- data.frame(max.col(pred)) %>%
  mutate(pred=labels[max.col(pred)]) %>%
  select(2) %>%
  unlist()
table(test4$label, prediction_label)

pred <- predict(model4_5node_layer, test4)
labels <- c("a", "b")
prediction_label <- data.frame(max.col(pred)) %>%
  mutate(pred=labels[max.col(pred)]) %>%
  select(2) %>%
  unlist()
table(test4$label, prediction_label)

pred <- predict(model4, test4)
labels <- c("a", "b")
prediction_label <- data.frame(max.col(pred)) %>%
  mutate(pred=labels[max.col(pred)]) %>%
  select(2) %>%
  unlist()
table(test4$label, prediction_label)

```

```{r}
generate_grid <- function(data) {
  x_range <- seq(min(data$x)-1, max(data$x)+1, length.out=200)
  y_range <- seq(min(data$y)-1, max(data$y)+1, length.out=200)
  grid <- expand.grid(x=x_range, y=y_range)
  return(grid)
}

grid1 <- generate_grid(data_two)
grid2 <- generate_grid(data_by_x)
grid3 <- generate_grid(data_by_xy)
grid4 <- generate_grid(spiral_data)
grid4_no_layers <- generate_grid(spiral_data)
grid4_5node_layer <- generate_grid(spiral_data)

```

```{r}
predict_grid <- function(model, grid) {
  grid$pred <- predict(model, grid)
  grid$pred_label <- ifelse(grid$pred[,1] > grid$pred[,2], 'a', 'b')
  return(grid)
}
grid1$pred_label <- predict_grid(model1, grid1)$pred_label
grid2$pred_label <- predict_grid(model2, grid2)$pred_label
grid3$pred_label <- predict_grid(model3, grid3)$pred_label
grid4$pred_label <- predict_grid(model4, grid4)$pred_label

grid4_no_layers$pred_label <- predict_grid(model4_no_layers, grid4)$pred_label

grid4_5node_layer$pred_label <- predict_grid(model4_5node_layer, grid4)$pred_label
```

```{r}
plot_prediction <- function(grid, data, title) {
  ggplot() +
    geom_tile(data=grid, aes(x=x, y=y, fill=pred_label), alpha=0.5) +
    geom_point(data=data, aes(x=x, y=y, color=label), alpha=0.8) +
    scale_fill_manual(values=c('a'='blue', 'b'='red')) +
    scale_color_manual(values=c('a'='blue', 'b'='red')) +
    labs(title=title, fill="Predicted Label", color="Actual Label") +
    theme_minimal()
}


p1 <- plot_prediction(grid1, data_two, "Model 1 Predictions")
p2 <- plot_prediction(grid2, data_by_x, "Model 2 Predictions")
p3 <- plot_prediction(grid3, data_by_xy, "Model 3 Predictions")
p4 <- plot_prediction(grid4, spiral_data, "Model 4 Predictions")
p4_no_layers <- plot_prediction(grid4_no_layers, spiral_data, "Model 4.no layers Predictions")
p4_5node_layer <- plot_prediction(grid4_5node_layer, spiral_data, "Model 4. 5 layer Predictions")


print(p1)
print(p2)
print(p3)
print(p4)
p4_no_layers
p4_5node_layer
```

```{r}

ui <- fluidPage(
  titlePanel("Neural Networks Visualization"),
  sidebarLayout(
    sidebarPanel(
      selectInput("dataset", "Choose a dataset:", choices = c("Gaussian distribution" = "data_two",
                                                             "Horizontal split" = "data_by_x", 
                                                             "Quadrants" = "data_by_xy", 
                                                             "Spiral data" = "spiral_data")),
      selectInput("learningRate", "Choose Learning rate", choices = c("default",
                                                                      "0.3", 
                                                                      "0.01", 
                                                                      "0.003", 
                                                                      "0.001", 
                                                                      "0.0003",
                                                                      "0.0001")),
      selectInput("HiddenLayers", "Choose Number of hidden layers:", choices = c("default",
                                                                                 "3", 
                                                                                 "4", 
                                                                                 "5",
                                                                                 "6",
                                                                                 "7",
                                                                                 "8",
                                                                                 "9")),
      actionButton("runModel", "Run Model")
    ),
    mainPanel(
      plotOutput("scatterPlot")
    )
  )
)

server <- function(input, output) {
  plotData <- reactive({
    
    #basic pulls with default from above
    if (input$HiddenLayers == "default" && input$learningRate == "default") {
      # Choose which pre-generated plot to display based on the dataset
      if (input$dataset == "data_two") {
        p1
      } else if (input$dataset == "data_by_x") {
        p2
      } else if (input$dataset == "data_by_xy") {
        p3
      } else {  # "spiral_data"
        p4
      }
    } else {
      
      # Convert numeric if not 'default'
      hidden_layers <- ifelse(input$HiddenLayers != "default", rep(as.numeric(input$HiddenLayers), 2), c(5,5))
      learning_rate <- ifelse(input$learningRate != "default", as.numeric(input$learningRate), 0.01)

      
      # Dynamic model function
      run_model <- function(data, 
                            hidden=hidden_layers,
                            rate=learning_rate) {
                                                 neuralnet(label~x+y, 
                                                 data=data, 
                                                 hidden=hidden,
                                                 learningrate=rate,
                                                 linear.output=FALSE, 
                                                 stepmax=1e+06)
      }

      data_list <- list(data_two = train1, data_by_x = train2, data_by_xy = train3, spiral_data = train4)

      model <- run_model(data_list[[input$dataset]])

      
      grid <- generate_grid(data_list[[input$dataset]])
      grid$pred_label <- predict_grid(model, grid)$pred_label
      plot_prediction(grid, data_list[[input$dataset]], paste("Model Predictions with LR =", learning_rate, ", Hidden Layers =", toString(hidden_layers)))
    }
  })

  # Only update the output plot when the button is clicked, doesnt really work
  observeEvent(input$runModel, {
    output$scatterPlot <- renderPlot({
      plotData()
    })
  }, ignoreInit = TRUE)
}

shinyApp(ui = ui, server = server)

```
